{"version":3,"sources":["../../src/utils/websocket-manager.js"],"names":["path","require","store","fs","pageDataUtil","normalizePagePath","telemetry","url","createHash","denormalize","undefined","charAt","length","getCachedPageData","pagePath","directory","program","pages","getState","publicDir","join","has","pageData","read","result","id","err","console","log","hashPaths","paths","map","update","digest","getCachedStaticQueryResults","resultsMap","cachedStaticQueryResults","Map","staticQueryComponents","forEach","staticQueryComponent","hash","filePath","fileResult","readFileSync","componentPath","set","JSON","parse","getRoomNameFromPath","WebsocketManager","constructor","isInitialised","activePaths","Set","pageResults","staticQueryResults","errors","init","bind","getSocket","emitPageData","emitStaticQueryData","emitError","connectedClients","server","programDir","websocket","on","s","activePath","handshake","headers","referer","add","send","type","payload","message","errorID","leaveRoom","leave","leftRoom","sockets","adapter","rooms","delete","getDataForPath","why","get","trackCli","siteMeasurements","clientsCount","Array","from","debounce","data","manager","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst fs = require(`fs`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst normalizePagePath = require(`../utils/normalize-page-path`)\nconst telemetry = require(`gatsby-telemetry`)\nconst url = require(`url`)\nconst { createHash } = require(`crypto`)\n\ntype QueryResult = {\n  id: string,\n  result: object,\n}\n\ntype QueryResultsMap = Map<string, QueryResult>\n\nconst denormalize = path => {\n  if (path === undefined) {\n    return path\n  }\n  if (path === `/`) {\n    return `/`\n  }\n  if (path.charAt(path.length - 1) !== `/`) {\n    return path + `/`\n  }\n  return path\n}\n\n/**\n * Get cached page query result for given page path.\n * @param {string} pagePath Path to a page.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedPageData = async (\n  pagePath: string,\n  directory: string\n): QueryResult => {\n  const { program, pages } = store.getState()\n  const publicDir = path.join(program.directory, `public`)\n  if (pages.has(denormalize(pagePath)) || pages.has(pagePath)) {\n    try {\n      const pageData = await pageDataUtil.read({ publicDir }, pagePath)\n      return {\n        result: pageData.result,\n        id: pagePath,\n      }\n    } catch (err) {\n      console.log(\n        `Error loading a result for the page query in \"${pagePath}\". Query was not run and no cached result was found.`\n      )\n      return undefined\n    }\n  }\n  return undefined\n}\n\nconst hashPaths = paths => {\n  if (!paths) {\n    return undefined\n  }\n  return paths.map(path => {\n    if (!path) {\n      return undefined\n    }\n    return createHash(`sha256`)\n      .update(path)\n      .digest(`hex`)\n  })\n}\n\n/**\n * Get cached StaticQuery results for components that Gatsby didn't run query yet.\n * @param {QueryResultsMap} resultsMap Already stored results for queries that don't need to be read from files.\n * @param {string} directory Root directory of current project.\n */\nconst getCachedStaticQueryResults = (\n  resultsMap: QueryResultsMap,\n  directory: string\n): QueryResultsMap => {\n  const cachedStaticQueryResults = new Map()\n  const { staticQueryComponents } = store.getState()\n  staticQueryComponents.forEach(staticQueryComponent => {\n    // Don't read from file if results were already passed from query runner\n    if (resultsMap.has(staticQueryComponent.hash)) return\n    const filePath = path.join(\n      directory,\n      `public`,\n      `static`,\n      `d`,\n      `${staticQueryComponent.hash}.json`\n    )\n    const fileResult = fs.readFileSync(filePath, `utf-8`)\n    if (fileResult === `undefined`) {\n      console.log(\n        `Error loading a result for the StaticQuery in \"${\n          staticQueryComponent.componentPath\n        }\". Query was not run and no cached result was found.`\n      )\n      return\n    }\n    cachedStaticQueryResults.set(staticQueryComponent.hash, {\n      result: JSON.parse(fileResult),\n      id: staticQueryComponent.hash,\n    })\n  })\n  return cachedStaticQueryResults\n}\n\nconst getRoomNameFromPath = (path: string): string => `path-${path}`\n\nclass WebsocketManager {\n  pageResults: QueryResultsMap\n  staticQueryResults: QueryResultsMap\n  errors: Map<string, QueryResult>\n  isInitialised: boolean\n  activePaths: Set<string>\n  programDir: string\n\n  constructor() {\n    this.isInitialised = false\n    this.activePaths = new Set()\n    this.pageResults = new Map()\n    this.staticQueryResults = new Map()\n    this.errors = new Map()\n    // this.websocket\n    // this.programDir\n\n    this.init = this.init.bind(this)\n    this.getSocket = this.getSocket.bind(this)\n    this.emitPageData = this.emitPageData.bind(this)\n    this.emitStaticQueryData = this.emitStaticQueryData.bind(this)\n    this.emitError = this.emitError.bind(this)\n    this.connectedClients = 0\n  }\n\n  init({ server, directory }) {\n    this.programDir = directory\n\n    const cachedStaticQueryResults = getCachedStaticQueryResults(\n      this.staticQueryResults,\n      this.programDir\n    )\n    this.staticQueryResults = new Map([\n      ...this.staticQueryResults,\n      ...cachedStaticQueryResults,\n    ])\n\n    this.websocket = require(`socket.io`)(server)\n\n    this.websocket.on(`connection`, s => {\n      let activePath = null\n      if (\n        s &&\n        s.handshake &&\n        s.handshake.headers &&\n        s.handshake.headers.referer\n      ) {\n        const path = url.parse(s.handshake.headers.referer).path\n        if (path) {\n          activePath = path\n          this.activePaths.add(path)\n        }\n      }\n\n      this.connectedClients += 1\n      // Send already existing static query results\n      this.staticQueryResults.forEach(result => {\n        this.websocket.send({\n          type: `staticQueryResult`,\n          payload: result,\n        })\n      })\n      this.errors.forEach((message, errorID) => {\n        this.websocket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      const leaveRoom = path => {\n        s.leave(getRoomNameFromPath(path))\n        const leftRoom = this.websocket.sockets.adapter.rooms[\n          getRoomNameFromPath(path)\n        ]\n        if (!leftRoom || leftRoom.length === 0) {\n          this.activePaths.delete(path)\n        }\n      }\n\n      const getDataForPath = async path => {\n        if (!this.pageResults.has(path)) {\n          const result = await getCachedPageData(path, this.programDir)\n          if (result) {\n            this.pageResults.set(path, result)\n          } else {\n            console.log(`Page not found`, path)\n            return\n          }\n        }\n\n        this.websocket.send({\n          type: `pageQueryResult`,\n          why: `getDataForPath`,\n          payload: this.pageResults.get(path),\n        })\n\n        telemetry.trackCli(\n          `WEBSOCKET_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.connectedClients,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n\n      s.on(`getDataForPath`, getDataForPath)\n\n      s.on(`registerPath`, path => {\n        s.join(getRoomNameFromPath(path))\n        activePath = path\n        this.activePaths.add(path)\n      })\n\n      s.on(`disconnect`, s => {\n        leaveRoom(activePath)\n        this.connectedClients -= 1\n      })\n\n      s.on(`unregisterPath`, path => {\n        leaveRoom(path)\n      })\n    })\n\n    this.isInitialised = true\n  }\n\n  getSocket() {\n    return this.isInitialised && this.websocket\n  }\n\n  emitStaticQueryData(data: QueryResult) {\n    this.staticQueryResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n      telemetry.trackCli(\n        `WEBSOCKET_EMIT_STATIC_PAGE_DATA_UPDATE`,\n        {\n          siteMeasurements: {\n            clientsCount: this.connectedClients,\n            paths: hashPaths(Array.from(this.activePaths)),\n          },\n        },\n        { debounce: true }\n      )\n    }\n  }\n\n  emitPageData(data: QueryResult) {\n    data.id = normalizePagePath(data.id)\n    this.pageResults.set(data.id, data)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n      telemetry.trackCli(\n        `WEBSOCKET_EMIT_PAGE_DATA_UPDATE`,\n        {\n          siteMeasurements: {\n            clientsCount: this.connectedClients,\n            paths: hashPaths(Array.from(this.activePaths)),\n          },\n        },\n        { debounce: true }\n      )\n    }\n  }\n  emitError(id: string, message?: string) {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.isInitialised) {\n      this.websocket.send({ type: `overlayError`, payload: { id, message } })\n    }\n  }\n}\n\nconst manager = new WebsocketManager()\n\nmodule.exports = manager\n"],"file":"websocket-manager.js"}